# -*- coding: utf-8 -*-
"""NER and Sentiment Analysis on Five Kinds of Text.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RpxGTYFYfZrpmoIPxdiGHxH3V0ubFyqt
"""

#This code loads in spacy to do named entity recognition, the sentiment analysis pipeline to do sentiment analysis, 
#and mathplotlib to create the graphs of the scores for each sentence within the different kinds of text examined. 
import spacy
from spacy import displacy
nlp = spacy.load("en_core_web_sm")
!pip install transformers
from transformers import pipeline
analysis_pipeline = pipeline("sentiment-analysis")
!pip install matplotlib
import matplotlib.pyplot as plt

"""1. Sentiment Analysis on a Poem"""

#I Wandered Lonely as a Cloud by William Wordsworth poem
#https://poemanalysis.com/best-poems/short-famous-classic/


poem = """I wandered lonely as a cloud. That floats on high o’er vales and hills. When all at once I saw a crowd. A host, of golden daffodils. """

doc = nlp(poem)
displacy.render(doc, style='ent', jupyter=True)

#This code does sentiment analysis on each sentence within the poem and appends each score to a list called score_list. 
score_list = []
sentence_list=poem.split(". ")
del sentence_list[-1]
for s in sentence_list:
  analysis_pipeline(s)
  for d in analysis_pipeline(s):
      value = d['score']
      if d['label'] == 'NEGATIVE':
          value = -abs(value)
      score_list.append(value)

#This piece of code counts the number of sentences within the poem and adds those numbers to a list called number_sentences. 
number_sentences = []
count = 0
for element in sentence_list:
  count+=1
  number_sentences.append(count)

#This code creates a graph examining how the score changes along with each sentence in the poem. 
print(poem)
plt.plot(number_sentences,score_list, color = 'red', marker = 'o')
plt.title('Poem: Sentence Number vs. Score')
plt.xlabel('Sentence Number')
plt.ylabel('Score')
plt.show()

"""2. Sentiment Analysis on a Tweet"""

#Tweet by Macaulay Culkin on August 26, 2020
#https://www.thetealmango.com/featured/top-20-most-liked-tweets-of-all-time/

tweet = """Hey guys, wanna feel old?. I'm 40. You're welcome. """

doc = nlp(tweet)
displacy.render(doc, style='ent', jupyter=True)

#This code does sentiment analysis on each sentence within the tweet and appends each score to a list called score_list.
score_list = []
sentence_list=tweet.split(". ")
del sentence_list[-1]
for s in sentence_list:
  analysis_pipeline(s)
  for d in analysis_pipeline(s):
      value = d['score']
      if d['label'] == 'NEGATIVE':
          value = -abs(value)
      score_list.append(value)

#This piece of code counts the number of sentences within the tweet and adds those numbers to a list called number_sentences. 
number_sentences = []
count = 0
for element in sentence_list:
  count+=1
  number_sentences.append(count)

#This code creates a graph examining how the score changes along with each sentence in the tweet. 
plt.plot(number_sentences,score_list, color = 'red', marker = 'o')
plt.title('Tweet: Sentence Number vs. Score')
plt.xlabel('Sentence Number')
plt.ylabel('Score')
plt.show()

"""3. Sentiment Analysis on a Short Story"""

#Sticks by George Saunders (Short Story)
#https://www.unm.edu/~gmartin/535/Sticks.htm

story = """Every year Thanksgiving night we flocked out behind Dad as he dragged the Santa suit to the road and draped it over a kind of crucifix he'd built out of metal pole in the yard. Super Bowl week the pole was dressed in a jersey and Rod's helmet and Rod had to clear it with Dad if he wanted to take the helmet off. On the Fourth of July the pole was Uncle Sam, on Veteran’s Day a soldier,  on Halloween a ghost. The pole was Dad's only concession to glee. We were allowed a single Crayola from the box at a time. One Christmas Eve he shrieked at Kimmie for wasting an apple slice. He hovered over us as we poured ketchup saying: good enough good enough good enough. Birthday parties consisted of cupcakes, no ice cream. The first time I brought a date over she said: what's with your dad and that pole? and I sat there blinking.

We left home, married,  had children of our own, found the seeds of meanness blooming also within us. Dad began dressing the pole with more complexity and less discernible logic. He draped some kind of fur over it on Groundhog Day and lugged out a floodlight to ensure a shadow. When an earthquake struck Chile he lay the pole on its side and spray painted a rift in the earth. Mom died and he dressed the pole as Death and hung from the crossbar photos of Mom as a baby. We'd stop by and find odd talismans from his youth arranged around the base: army medals, theater tickets, old sweatshirts, tubes of Mom's makeup. One autumn he painted the pole bright yellow. He covered it with cotton swabs that winter for warmth and provided offspring by hammering in six crossed sticks around the yard. He ran lengths of string between the pole and the sticks, and taped to the string letters of apology, admissions of error, pleas for understanding, all written in a frantic hand on index cards. He painted a sign saying LOVE and hung it from the pole and another that said FORGIVE? and then he died in the hall with the radio on and we sold the house to a young couple who yanked out the pole and the sticks and left them by the road on garbage day. """

doc = nlp(story)
displacy.render(doc, style='ent', jupyter=True)

#This code does sentiment analysis on each sentence within the short story and appends each score to a list called score_list.
score_list = []
sentence_list=story.split(". ")
del sentence_list[-1]
for s in sentence_list:
  analysis_pipeline(s)
  for d in analysis_pipeline(s):
      value = d['score']
      if d['label'] == 'NEGATIVE':
          value = -abs(value)
      score_list.append(value)

#This piece of code counts the number of sentences within the short story and adds those numbers to a list called number_sentences. 
number_sentences = []
count = 0
for element in sentence_list:
  count+=1
  number_sentences.append(count)

#This code creates a graph examining how the score changes along with each sentence in the short story. 
plt.plot(number_sentences,score_list, color = 'red', marker = 'o')
plt.title('Short Story: Sentence Number vs. Score')
plt.xlabel('Sentence Number')
plt.ylabel('Score')
plt.show()

"""4. Sentiment Analysis on a Biography"""

#Elon Musk: Tesla, SpaceX, and the Quest for a Fantastic Future by Ashlee Vance (Biography)
#https://ig.ft.com/sites/business-book-award/books/2015/longlist/elon-musk-by-ashlee-vance/

biography = """South African born Elon Musk is the renowned entrepreneur and innovator behind PayPal, SpaceX, Tesla, and SolarCity. Musk wants to save our planet, he wants to send citizens into space, to form a colony on Mars, he wants to make money while doing these things and he wants us all to know about it. The personal tale of Musk’s life comes with all the trappings one associates with a great, drama filled story. He was a freakishly bright kid who was bullied brutally at school and abused by his father. In the midst of these rough conditions and the violence of apartheid South Africa, Musk still thrived academically and attended the University of Pennsylvania, where he paid his own way through school by turning his house into a club and throwing massive parties. He started a pair of huge dot com successes, including PayPal, which eBay acquired for $1.5 billion in 2002. Musk was forced out as CEO and so began his lost years in which he decided to go it alone and baffled friends by investing his fortune in rockets and electric cars. Meanwhile Musk’s marriage disintegrated as his technological obsessions took over his life. Elon Musk is the Steve Jobs of the present and the future and for the past twelve months, he has been shadowed by tech reporter, Ashlee Vance. Elon Musk: How the Billionaire CEO of Spacex and Tesla is Shaping our Future is an important, exciting and intelligent
account of the real life Iron Man. """

doc = nlp(biography)
displacy.render(doc, style='ent', jupyter=True)

#This code does sentiment analysis on each sentence within the biography and appends each score to a list called score_list.
score_list = []
sentence_list=biography.split(". ")
del sentence_list[-1]
for s in sentence_list:
  analysis_pipeline(s)
  for d in analysis_pipeline(s):
      value = d['score']
      if d['label'] == 'NEGATIVE':
          value = -abs(value)
      score_list.append(value)

#This piece of code counts the number of sentences within the biography and adds those numbers to a list called number_sentences. 
number_sentences = []
count = 0
for element in sentence_list:
  count+=1
  number_sentences.append(count)

#This code creates a graph examining how the score changes along with each sentence in the biography. 
plt.plot(number_sentences,score_list, color = 'red', marker = 'o')
plt.title('Biography: Sentence Number vs. Score')
plt.xlabel('Sentence Number')
plt.ylabel('Score')
plt.show()

"""5. Sentiment Analysis on a Speech"""

#Gettysburg Address by Abraham Lincoln (Speech)
#https://www.abrahamlincolnonline.org/lincoln/speeches/gettysburg.htm (Nicholas Copy)

speech = """Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.

Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.

But, in a larger sense, we can not dedicate -- we can not consecrate -- we can not hallow -- this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us -- that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion -- that we here highly resolve that these dead shall not have died in vain -- that this nation, under God, shall have a new birth of freedom -- and that government of the people, by the people, for the people, shall not perish from the earth."""

doc = nlp(speech)
displacy.render(doc, style='ent', jupyter=True)

#This code does sentiment analysis on each sentence within the speech and appends each score to a list called score_list.
score_list = []
sentence_list=speech.split(". ")
del sentence_list[-1]
for s in sentence_list:
  analysis_pipeline(s)
  for d in analysis_pipeline(s):
      value = d['score']
      if d['label'] == 'NEGATIVE':
          value = -abs(value)
      score_list.append(value)

#This piece of code counts the number of sentences within the speech and adds those numbers to a list called number_sentences. 
number_sentences = []
count = 0
for element in sentence_list:
  count+=1
  number_sentences.append(count)

#This code creates a graph examining how the score changes along with each sentence in the speech. 
plt.plot(number_sentences,score_list, color = 'red', marker = 'o')
plt.title('Speech: Sentence Number vs. Score')
plt.xlabel('Sentence Number')
plt.ylabel('Score')
plt.show()